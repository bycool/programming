一，文件类型：
	1）普通文件(regular file):最常见的文件类型，这种文件包含了某种形式的数据。对普通文件内容的解释由处理该文件的应用程序进行。
	2）目录文件(directory file):这种文件包含了其他文件的名字以及指向这些与这些文件有关信息的指针。对于一个目录文件具有读权限的任一进程都可以读该目录，但是只有内核可以直接写目录文件。
	3）块特殊文件(block special file):这种文件类型提供对块设备(例如磁盘)带缓冲的访问，每次访问以固定长度为单位进行。（块设备）
	4）字符特殊文件(character special file)：这种文件类型对设备不带缓冲的访问，每次访问长度可变。系统中的所有设备要么是字符特殊文件，要么是块特殊文件。（字符设备）
	5）FIFO，这种文件类型用于进程间通信，有时也将其称为命名管道(named pipe)。
	6）套接字(socket)：这种文件类型用于进程间通信。套接字也可用于在一台宿主机上进程之间的非网络通信。
	7）符号链接(symbolic link)：这种文件类型指向另一个文件。

	文件类型信息包含在stat结构的st.mode成员中。
	struct stat {
		mode_t		st_mode;	file type & mode (permissions)
		ino_t		st_ino;		i-node number (serial number)
		dev_t		st_dev;		device number (file system)
		dev_t		st_rdev;	device number for special files
		nlink_t		st_nlink;	number of links
		uid_t		st_uid;		user ID of owner
		gid_t		st_gid;		group ID of owner
		off_t		st_size;	size in bytes, for regular files
		time_t		st_atime;	time of last access
		time_t		st_mtime;	time of last modification
		time_t		st_ctime;	time of last file status change
		blksize_t	st_blksize;	best i/o block size
		blkcnt_t	st_blocks;	number of disk blocks allocated
	}

二，设置用户ID和设置组ID：
	与一个进程相关联的ID有6个ID或者更多。
	1,实际用户ID & 实际组ID   (我们实际上是谁)
	  有效用户ID & 有效组ID	& 附加组ID	(用于文件访问权限检查)
	  保存的这只用户ID & 保存的设置组ID	(由exec函数保存)

三，文件访问权限
	st_mode值包含了只对文件的访问权限位。
	S_IRUSR	用户-读
	S_IWUSR	用户-写
	S_IXUSR	用户-执行
	S_IRGRP	组-读
	S_IWGRP	组-写
	S_IXGRP	组-执行
	S_IROTH	其他-读
	S_IWOTH	其他-写
	S_IXOTH	其他-执行

四，新文件和目录的所有权
	新文件的用户ID设置为进程的有效用户ID，关于组ID实现选择下列之一的操作为新文件的组ID
	1）新文件的组ID可以是进程的有效组ID。
	2）新文件的组ID可以是它所在目录的组ID。

chown : 更改文件的用户ID和组ID
int chown(const char* pathname, uid_t owner, gid_t group)
int fchown(int filedes, uid_t owner, gid_t group);
int lchown(const char* pathname, uid_t owner, gid_t group);

文件长度：
stat结构体成员st_size表示以字节为单位的文件长度。
普通文件，文件长度可以为0
目录，文件长度通常是一个数
符号链接如下
lrwxrwxrwx	1	root	7 Sep 25 07:14 lib -> usr/lib
其中7就是路径 usr/lib


#include <unistd.h>
int link(const char* existingpath, const char* newpath)任何一个文件可以有多个目录项指向其i节点。
int unlink(const char* pathname)

#include <stdio.h>
int remove(const char* pathname) remove的功能与rmdir相同
int rename(const char* oldname, const char* newname) 文件与目录用rename函数更名

#include <unistd.h>
int link(const char* oldpath, const char* newpath) 给oldpath建立一个硬链接，此函数不能在不同文件系统间创建硬链接。成功返回0,失败返回-1,错误原因存于errno
int symlink(const char* actualpath, const char* sympath) 创建链接符号,可在不同文件系统间创建,成功返回0,失败返回-1,错误原因存于errno
int unlink(const char* pathname) 删除一个现有的目录项，并将由pathname所引用文件的链接数减1。
ssize_t readlink(const char* restrict pathname,char* restrict buf, size_t bufsize) 读取该链接的文件名字，存于buf。成功返回文件名字字符数


文件的时间
st_atime	文件数据最后访问时间	read			ls -u
st_mtime	文件数据最后修改时间	write			ls
st_ctime	i节点状态最后修改时间	chmod,chown		ls -c

#include <utime.h>
int utime(const char* pathname, const struct utimbuf* times) 成功返回0,出错返回-1
一个文件的访问和修改时间可以用utime函数修改

#include <sys/stat.h>
int mkdir(const char* pathname, mode_t mode) 创建一个空目录
int rmdir(const char* pathname) 删除一个空目录

#include <unistd.h>
int chdir(const char* pathname) 更改当前工作目录
int fchdir(int filedes) 两个函数的返回值，成功返回0,出错返回-1
char* getcwd(char* buf, size_t size)


