进程关系
	9.1 引言
	这一章引入会话的概念.

	9.2 终端登陆
	终端登陆分为两种:本地登陆,远程登陆(通过调制解调器登陆)
	登陆到UNIX系统时所执行的各个程序: (系统管理员创建/etc/ttys文件,文件内每一行都用来说明设备名和传递给getty程序的参数)
	1,当系统自启动时,内核创建进程ID为1的进程也就是init进程.init进程使系统进入多用户状态,init进程读文件/etc/ttys,对每个允许登陆的终端设备,init调用一次fork,它所生成的子进程则执行getty程序.
	2,getty为终端设备调用open函数,以读写方式打开终端.然后getty输出"login:"之类的信息,并等待用户键入用户名.
	3,当用户键入用户名后,getty工作完成.调用login程序: execle("/bin/login","login","-p",username,(char*)0,envp)
	4,login将切换目录到用户的home目录,改变该终端设备的权限,login进程改变为登陆用户ID并调用改用户的登陆.
	  shell:execl("/bin/sh","-sh",(char*)0)

	9.3 网络登陆
	略

	9.4 进程组
	每个进程除了进程ID还有一个进程组ID.
	进程组是一个或多个进程的集合.通常,它们与同意作业相关联.可以接收来自同一个终端的各种信号.每个进程组有一个唯一的进程组ID.
	
	#include <unistd.h>
	pid_t getpgrp(void)
	函数getpgrp返回调用进程的进程组ID: 调用该函数的进程的进程组ID

	#include <unistd.h>
	pid_t getpgid(pid_t pid)
	参数为pid,返回该进程的进程组ID: 成功返回进程组ID,出错返回-1

	一个进程只能给它自己或它的子进程设置进程组ID.
	#include <unistd.h>
	int setpgid(pid_t pid, pid_t pgid);
	进程可以通过调用setpgid来加入一个现有的组 或 创建一个进程组: 成功返回0,出错则返回-1.
	setpgid函数将pid进程的进程组ID设置为pgid,如果两个参数相同,则由pid指定的进程变成进程组组长.如果pid是0,则使用调用者的进程ID.如果gpid是0,则由pid指定的进程ID将用作进程组ID.

	9.5 会话
	会话是一个或多个进程组的集合.

	进程调用setsid函数创建一个新会话.
	#include <unistd.h>
	pid_t setsid(void)
	如果调用此函数的进程不是一个进程组组长,则此函数则会创建一个新会话,结果将发生如下三件事:
		1,该进程成为新会话首进程,此时该进程是该会话中唯一的进程.
		2,该进程成为一个新进程组组长进程.新进程组ID就是调用进程的进程ID.
		3,该进程没有控制终端.如果在调用setsid之前,该进程有一个控制终端,那么这种联系也会被中断
	如果进程是进程组组长则函数返回出错,所以之前需要fork,使其父进程终止,子进程继续.所以子进程有自己的进程id,父进程的组ID.

	#include <unistd.h>
	pid_t getsid(pid_t pid); 成功返回会话首进程的进程组ID,出错返回-1
	如果pid为0,getsid返回调用进程的会话首进程的进程组ID.
	
