信号：
	10.1引言：
	信号是软件中断，很多比较重要的应用程序都需要处理信号。信号提供了一种处理异步时间的方法。

	10.2信号概念
	信号是异步事件的经典实例。产生信号的事件对进程而言是随机出现的。进程不能简单的测试一个变量来判断是否出现一个信号，而是必须告诉内核“在此信号出现时，请执行以下操作”。
	可以要求内核字啊某个信号出现时按照下列三种方式之一进行处理。
	1）忽略此信号。大多数信号都可以使用这种处理方式，但是两种信号却不能被忽略：SIGKILL，SIGSTOP。他们是向超级用户提供了使进程终止或停止的可靠方法。
	2）捕捉信号。通知内核在某种信号发生时调用一个用户函数，在函数中，可执行用户希望对这种事件进行的处理。
	3）执行系统默认动作。

	10.3 signal函数
	unix系统信号机制最简单的借口就是signal函数
	#include <signal.h>
	void (*signal(int signo, void (*func)(int)))(int);
	成功则返回信号以前的处理配置，若出错则返回SIG_ERR
	参数:signo参数为接收到的信号
	     func的值为处理函数.如果func可以是常量SIG_IGN,SIG_DFL或接收到信号后要调用的函数的地址.如果制定SIG_IGN,则向内核表示忽略此信号.(SIGKILL,SIGSTOP不能忽略),SIG_DFL,则表示接收到信号后动作为系统默认动作.如果是函数地址,则调用此函数.
	实例:
		signal(SIGUSR1,sig_usr)
		static void sig_usr(int signo){
			if(signo == SIGUSR1) printf("received SIGUSR1\n";)
		}
	-----------------------------------------------------------
	
	10.6 可重入函数
	可重入函数可以由多于一个任务并发使用,而不必担心数据错误.不可重入函数不能由超过一个任务所共享,除非能确保函数的互斥.
	比如malloc:当进程a将要调用malloc函数给进程分配内存,此时遇到信号中断,插入执行该信号处理程序,然后在返回a进程,在信号处理过程中又调用了malloc,malloc通常为它所分配的存储区维护一个链接表,而插入执行信号函数时,进程可能正在改变次链表.
		


















