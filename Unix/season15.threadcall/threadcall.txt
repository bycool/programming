进程间通信:
	15.1 引言
	进程间交换信息可以通过fork或者exec传送打开文件,或者通过文件系统
	本章将说明进程之间相互通信的其他技术--IPC(InterProcess Communication)

	15.2 管道
	管道是unix系统IPC最古老的形式,并且所有unix系统都提供此种通信机制.
	管道的限制: 
		1,历史上,管道是半双工(数据只能在一个方向上流动),现在有些系统提供全双工.
		2,他们只能在具有公共主线的进程之间使用.

	管道是由调用pipe函数而创建的.
	#include <unistd.h>
	int pipe(int filedes[2]); 成功返回0,若出错则返回-1;
	经由参数filedes返回两个文件描述符:filedes[0]为读而打开,filedes[1]为写而打开. filedes[1]的输出也是filedes[0]的输入.

	父进程A创建两个管道文件描述符fa0和fa1后,调用fork产生子进程B,则B会有两个和A进程相同名称的管道文件描述符fb0和fb1,(这里为了区分管道文件描述符所有者,其实AB拥有的管道文件描述符同名.),为了构造从子进程到父进程的管道,父进程需要关闭fa1(写),子进程需要关闭fb0(读).
	当管道的一端被关闭后,两条规则起作用:
	1,当读一个写端已经被关闭的管道时,在所有数据都读取后,read返回0.以指示达到了文件结束处.
	2,如果写一个读端已经被关闭的管道,则产生信号SIGPIPE.如果忽略该信号或者捕捉该信号并从其处理程序返回,则write返回-1,errno设为EPIPE.











