1. namespace    1_namespace.cc
	命名空间可以包含命名空间，需要使用子命名空间需要引用它，如果它与父空间或其它空间右成员冲突，需要知名空间名称。

2. C++对C语言的增强
	1.C语言在BSS段定义两个相同名称的变量是可以编译通过的
	  C++不可以
	2.C语言结构体声明变量是需要带struct 或使用typedef
	  C++不需要，C++把struct当class。
	3.C语言函数可以不署名返回类型，默认int。
	  C++,函数必须指定返回类型
	4.C语言对无参数函数，传递给它参数，编译不会报错，且运行正常。但对于有参数的函数，传递多余的参数，编译会报错。
	  C++对参数个数会检验
	5.bool关键字
		C, 0:非，非0：真
		C++,0和非0依旧可以表示真假，新增bool类型，bool类型，true，false两个赋值。 bool 是一个字节。

3, 三目运算的加强
	在C中三目运算符返回变量的值
	在C++中返回的是变量的引用。

4，const增强
  C:
	const int a   :虽然是只读，但可以通过指针指向a，修改指针变量  这个a是变量，不能当数组的容量标志， int arr[a] 是错的
	int const a
	以上等价

	const int *a  : a指向的地址内存内的内容不可修改，但a可以指向其它地址
	int* const a  : a指向的地址不可改变，但内存地址内的值可以修改。

  C++:
	const int a = 10;   a是真正常量, 编译器将这样的常量放入符号表内,在使用a时，直接将a替换为值，类似宏。 int arr[a] 是可以的。
	int *p = (int*)&a;  如果对一个常量取地址，编译器会临时开辟一个空间，让这个指针存放临时空间的地址。也就是*p指向一个匿名的隐藏内存，修改*p，是修改这块内存的内容。

5，枚举的增强
	C语言 枚举的弊端，enum内可以包含很多项，但在实际使用时可以用值代替，对阅读代码造成困难。
		enum {
			a = 0,
			b
		}
		enum s = 0;
		if(s == 0) {}

	C++   枚举变量想赋值，不能通过值赋值.
		enum s = 0;//error
		enum s = a; //right

6, 引用
	int &a = b;  //a是b的引用
	引用不像指针一样可以修改指向，它是a的引用就一直是，它就是a。
	引用声明必须初始化,且引用可以指向引用.
	int a = 20;
	int b = 30;
	int &re = a;
	rc = b;// 这里相当与将b的30赋值给了a，也就是re。

	优势：
		1，如果引用作为参数，相当于指针变量做参数
			int a = 10; void change(int* a) { *a=10;}  change(&a);
			int a = 10; void change(int &a) { a = 10; } change(a);
	
