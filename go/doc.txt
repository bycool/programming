1 go开发环境搭建

	系统：rhel6.9
	go包: go1.12.5.linux-amd64.tar.gz

	tar xvf go1.12.5.linux-amd64.tar.gz -C /usr/local

	export PATH=$PATH:/usr/local/go/bin

	运行 go
	[ten@localhost datum]$ go
	Go is a tool for managing Go source code.
	Usage:
	go <command> [arguments]
    ...

	环境搭建成功。


2 帮助与文档

	https://studygolang.com/pkgdoc  Golang标准库文档

3  hello world : helloworld.go

	package main
	import "fmt"
	func main() {
		fmt.Println("hello world");
	}

	go run helloworld.go      类似python 解释器运行
	go build helloworld.go    类似gcc编译出二进制文件，在运行。

4 变量的声明 var.go
	var      a       int       =    10
    关键字   变量名  变量类型       变量的直

    a := 10   功能同上，自动判断类型  var关键字可省略

	fmt.Printf("a:%T\n", a); 判断类型

	i, j := 10, 20  多重赋值 结果:i=10,j=20

	i, _ := 10, 20  匿名赋值  i=10  20被丢掉	配合函数返回值使用

5 常量  const.go
	变量: 运行时，可以改变的量，声明时用var
	常量: 运行时，不可以改变的量，声明时用const

	const   a        int   =   10
	关键字  变量名   类型      变量值

	const   a    =  10     自动推导类型  const不可以省略  且不许要使用 := 
	关键字

	常量声明时必须初始化

6 多个变量或常量定义  several.go
	var (  多个变量同时声明，也可以同时赋值, 且可以自动推导类型
		a int = 1
		b float = 3.14
	)

	const (
		a = 10
		b = 3.14
	)

7 iota枚举  iota.go
	iota常量自动生成器，每个一行，自动累加1
	iota给常量赋

	只有换行的iota才会自动累加1

8 bool类型  bool.go
	var     a        bool       = true
	关键字  变量名   变量类型

	a := true   自动推导类型
	var a = true  自动推导类型

	如果只声明未初始化，则默认为false，既0.

9 float 浮点型  float.go
	var f1 float32
	fmt.Printf("%g\n", f1)

	自动推导出来的类型一般都是float64

10 字符类型 char.go
	var       char    byte
					  类型

11 字符串类型 string.go
	var str1 string
	str1 = "123456"

	len() 内建函数，获得字符串长度，类似strlen，不算结尾的'\0'

12 complex 复数类型 complex.go
	var t complex128
	t = 2.1 + 3.14i

	获取实部 real(t)
	获得虚部 imag(t)

13 格式化输出

	
14 变量的输入 scan.go
	fmt.Scan(&a)
	fmt.Scanf("%d", &a)

	类似 c语言的scanf

15 类型转换 tconver.go
	bool 不能兼容 int    对bool来说  0 == false, ~0 == true

	兼容类型之间的转换:  char c = 'a',     int(c)为其转换的方法
	
16 if   if.go
	go的if相对于c语言的if，不需要()包含判断表达式，但一定需要{}来包含分支执行语句	

	if else if 和C语言一样

17 switch switch.go
	break：在switch的case内，不需要写break，go语言自带break，C语言内需要break跳出switch。
	fallthrough ：相当与C语言中不带break，在对应的case之后的case无条件执行

18 for  for.go
	for 初始条件; 判断条件; 条件变化
	和C语言的for几乎一样，更像c99的for

19 range range.go
	把range看作一个返回两个直的函数，第一个是位置，第二个是值

20 break与continue的区别 bc.go
	go的break&continue和C语言的一样

21 goto goto.go
	和C的goto一样


22 无参数无返回值函数  func1.go
	和C语言的函数一样
    C：
		void test(void);
	go:
		func test()

23 有参数无返回值函数  func2.go
	func test(a int, b int)
    func test(a, b int) 和上面的一样
	go语言不支持函数重载

24 不定参数列表  func3.go
   参数个数不确定, 类似C语言，printf()
	func test(args      ...int)
			  参数      int型的不定参数列表

	固定参数函数，一定传对应个数的参数。
	不定参数函数，可以不传参数。
				  如果有定长参数，必须写在不定参数列表前面，类型可以和不定参数类型不同。

	不定参数作为实参传递时，可以指定传递参数,但必须是连续的。

25 无参数一个返回值的函数 func4.go
	func test()(int) {}    返回值的类型在参数列表和函数体之间表明   实例中的int表示返回一个int

26 多个返回值的函数  func5.go
	return后添加要返回的变量，用逗号分开变量，变量类型可以不同。
	调用函数时，接收函数返回值的变量个数需与返回值 个数相同，可用匿名变量可以用来站位。

27 有参数有返回值的函数  func6.go
	没什么特别的

28 普通函数的调用流程  func7.go
	和C一样

29 递归函数 func8.go
	和C一样

30 函数类型  functype.go
	类似C语言的函数指针

31 回调函数 funccallback.go

32 匿名函数和闭包 bbao1.go
	闭包：一个函数“捕获”了和它在同一作用域的变量和常量。这就意味着不管闭包在什么地方被调用，它都可以使用这些常量和变量，它不关心这些变量和常量超出了作用域，所以只有闭包还在使用他们，他们还会存在。
	匿名函数定义在其它函数内

33 闭包捕获外部变量的特点 bbao2.go
	闭包内与外部变量同名的变量是相同的变量，而不是像C那样，在内部函数在创建个局部变量.

34 闭包的特点
	func test01() func() int {
	    var x int
    	return func() int {
       		x++;
        	return x*x
    	}
	}
	func main() {
    	test02()
    	fmt.Printf("%d\n", test02())

    	f := test01()
    	fmt.Printf("%d\n", f())
    	fmt.Printf("%d\n", f())
    	//虽然x为test01的局部变量，但是被func()闭包函数使用，则它不会在最后一次func调用完前被释放掉，也不会被重新初始化
	}

35 defer:延迟调用 defer1.go
	被defer修饰的语句会在main函数结束前才被调用

	多个defer执行顺序类似栈,后进先出，就算程序遇到崩溃时，defer修饰的语句也会在程序退出时执行.吊呀。
	defer类似在main的执行逻辑上注册一个入口点，将这些入口点压栈，和非defer的代码段逻辑上排序，也就是   main-> {~defer code|defer3|defer2|defer} 当某个代码段崩溃，main会跳到下一个代码段的入口进行执行。(非官方理解)

36 defer和匿名函数结合使用
	被defer修饰的匿名函数不需要再调用执行，在main结束前就会被调用，且如果匿名函数如果传入实参，则实参是在代码顺序时的值。

37 获得命令行参数
	C main(int argc, char** argv)

	go的命令行参数都是以字符串传入的
	使用os包，os.Args相当与char** argv
	len()可以获取长度，range可以遍历

38 局部变量 全局变量
	局部变量和C一样
	全局变量不能使用自动推导, 正常定义可以初始化

39 不同作用域的同名变量
	在不同域的同名变量使用就近原则,就近的域内的同名变量。和C很像

40 包的导入
	import . "fmt"  多一个点，可以在调用包内函数时可以不指定包名，如果相同函数名在不同包时使用次方法可能会出错
	这个点也可以是 其它字符串，相当于给 "fmt" 换个名字
	import _ "fmt" 相当于忽略这个包

41 工程管理:同级目录  importpkg1/ mymath.go main.go
	1.多个源文件放在相同目录下 src/
	2.设置GOPATH环境变量
	mymath.go 必须package main,和main.go的一样,因为两个文件在相同目录

42 工程管理:不同级目录 importpkg2/ src/cale/calc.go src/main.go
	对于不同级包的运行和编译必须设置GOPATH环境变量
	1,不同目录，不同包名字(package)
	2,调用不同包里的函数格式： 包名.函数名()
	3,调用别的包的函数，如果这个函数名如果是小写，无法让别人调用，首字母为大写是可以被被人调用到

	export GOPATH=/xxx/xxx/importpkg2/

	importpkg2/src/cale/calc.go:
	package calc
	func Add(a, b int) int ;

43 main函数和init函数
	package  main                 calc
	import "calc"                 init()

	main函数内导入了calc包，则程序逻辑上是先去calc包内执行calc的init函数.

	import _ "calc" 则是为了只调用calc内的init函数，其它都不允许调用.

44 go_intall命令

45 指针基本操作 ptr1.go
	和C一样把

46 new函数
	和malloc一样，不是给大小，给的是类型
	var a *int = new(int)

47 指针和函数，指针参数 ptr2.go
	和C一样

48 数组 arr1.go
	var a [5]int = [5]int{3,2,4,1,5}   声明初始化
	b := [5]int{3,2,4,1,5}   自动推导方式
	c := [5]int{2:10, 4:20}   --> {0,0,10,0,20}}

49 数组做函数参数 arr2.go
	数组做函数参数是值传递,实参数组的每个元素给型参拷贝一份

50 数组指针做函数参数 arr3.go
	传指针实际就是将main内的内存地址传给参数，所以参数内的修改会影响到main的变量

51 切片 slice1.go
	array := [...]int{1,2,3,0,0,0}
	slice : = array[0:3:5]
					[low:high:max]       [起始：终点：长度]
	长度 len = high - low
	容量 cap = max - low

	切片是数组的截取，指出起始点，结束点，容量, 切片不是数组，是引用了数组的一段

52 数组与切片的区别 slice2.go
	数组的[]内指定数组的长度，是个固定的常量，数组不能改变长度，len和cap永远是固定的
	切片的[]内为空或...，切片的长度和容量可以不固定, 切片末尾可以追加一个成员, slice = append(slice, val)
