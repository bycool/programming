1._exit 函数的作用是：直接使进程停止运行，清除其使用的内存空间，并清除其在内核的各种数据结构；exit 函数则在这些基础上做了一些小动作，在执行退出之前还加了若干道工序。exit() 函数与 _exit() 函数的最大区别在于exit()函数在调用exit  系统调用前要检查文件的打开情况，把文件缓冲区中的内容写回文件。也就是图中的“清理I/O缓冲”。


2. 先讲讲PV操作的起源和用法。
1962年，荷兰学者Dijksrta在参与X8计算机的开发中设计并实现了具有多道程序运行能力的操作系统——THE Multiprogramming System。为了解决这个操作系统中进程（线程）的同步与互斥问题，他巧妙地利用火车运行控制系统中的“信号灯”（semaphore，或叫“信号量”）概念加以解决。信号量的值大于0时，表示当前可用资源的数量；当它的值小于0时，其绝对值表示等待使用该资源的进程个数。注意，这个信号量的值仅能由PV操作来改变。

3.netlink socekt是一种用于在内核态和用户态进程之间进行数据传输的特殊的IPC。

4.glibc的malloc分配的内存在free之后，并不一定会交还给操作系统，释放的内存会被glibc管理维护，方便下次malloc的时候继续使用。是有满足一定的条件的情况下，释放的内存才会交还给操作系统。在不断的malloc，free之后，某一进程会导致大量的内存碎片产生，这些内存碎片由于glibc的回收机制，很难被交还给操作系统。因而出现“内存泄漏”现象。
  glibc有一个malloc_trim函数可以强制将glibc保存的待用内存给释放掉.
  检查内存泄漏工具(或运行环境)valgrind,googleperftool.Purify

5.char* getcwd(buff,size): 保存当前路径的缓冲区，缓冲区大小。返回值也是buff的地址。
