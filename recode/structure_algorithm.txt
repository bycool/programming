数据结构：
1.顺序表(sequence list). sqlist.c
	顺序表是在计算机内存中以数组的形式保存的线性表，是指使用一组地址连续的存储单元依次存储数据元素的线性结构。
	typedef struct{
		type_t data[MAXSIZE];
		int length;
	}sqlist;
	插入元素
	删除元素

2.单链表.:lnode.c
	链表是一组任意的存储单元存储线性表的数据元素.单链表就是沿着单方向的链表.
	typedef struct lnode{
		int i;
		struct lnode* next;
	}node;
1	destroylist 销毁单链表
1	initlist  初始化一个带头节点的空单链表
1	insertElem, 在单链表中第 i 个位置插入元素 elem
1	removeElem, 在单链表中移除第 pos 个元素，并由 elem 返回其值
1	createList, 根据数组 elems 构建一个单链表
1	isEmptyList, 判断单链表是否为空
1	getElem, 获取单链表上位置为 pos 的元素
1	locateElem, 获取元素 elem 在单链表上第一次出现的位置，如果不存在返回 -1
1	getLength, 获取单链表长度
1	printList, 打印整个单链表
1	reverseList, 反转单链表
		
3.双链表
	双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。
	typedef struct lnode{
		int data;
		struct dnode* pre,*next;
	}node;
1	destroylist
1	initlist;
1	insertelem;
1	removelem;
1	isemptylist
1	getelem
1	locatelem
1	getlen
1	printlist;
1	reverselist


4.循环链表
	循环链表是另一种形式的链式存贮结构。它的特点是表中最后一个结点的指针域指向头结点，整个链表形成一个环。
	单循环链表：在单链表中，将终端结点的指针域NULL改为指向表头结点或开始结点即可。
	typedef struct lrnode{
		int data;
		struct lrnode* next;
	}node;
1	destroylist 销毁单链表
1	initlist  初始化一个带头节点的空单链表
1	insertElem, 在单链表中第 i 个位置插入元素 elem
1	removeElem, 在单链表中移除第 pos 个元素，并由 elem 返回其值
	createList, 根据数组 elems 构建一个单链表
1	isEmptyList, 判断单链表是否为空
1	getElem, 获取单链表上位置为 pos 的元素
1	locateElem, 获取元素 elem 在单链表上第一次出现的位置，如果不存在返回 -1
1	getLength, 获取单链表长度
1	printList, 打印整个单链表
1	reverseList, 反转单链表

	多重循环链表：
	typedef struct drnode{
		int data;
		struct drnode* pre;
		struct drnode* next;
	}node;
	destroylist 销毁单链表
	initlist  初始化一个带头节点的空单链表
	insertElem, 在单链表中第 i 个位置插入元素 elem
	removeElem, 在单链表中移除第 pos 个元素，并由 elem 返回其值
	createList, 根据数组 elems 构建一个单链表
	isEmptyList, 判断单链表是否为空
	getElem, 获取单链表上位置为 pos 的元素
	locateElem, 获取元素 elem 在单链表上第一次出现的位置，如果不存在返回 -1
	getLength, 获取单链表长度
	printList, 打印整个单链表
	reverseList, 反转单链表



5.栈
	栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。
		|	| 栈顶
		| -	|
		| _ | 栈底

	typedef struct stack{
		int* head;
		int* end;
		int size;
	}stack;

	初始化栈
	push
	pop
	destroystack


6.队列
	队列是一种和栈相反的，遵循先进先出原则的线性表。


算法:
分治法
动态规划
贪心算法
回溯法
分支界定法

查找算法：
 字符串匹配查找
	蛮力算法(BF算法)
	KMP算法：消除了BF算法中回溯问题


 线性表查找
	顺序查找
	二分查找
	分块查找

 树表的查找

 哈希表查找

排序算法：	
	冒泡排序
	快速排序
	插入排序
	希尔排序
	选择排序
	归并排序
	堆排序
	基数排序
