看一看sys_open都干了什么。

fs/open.c 1053
系统调用open：
SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, int, mode)
{
    long ret;

    if (force_o_largefile())  //是否需要设置O_LARGEFILE标志，大文件标识
        flags |= O_LARGEFILE;

    ret = do_sys_open(AT_FDCWD, filename, flags, mode);
    /* avoid REGPARM breakage on x86: */
    asmlinkage_protect(3, ret, filename, flags, mode);
    return ret;
}


long do_sys_open(int dfd, const char __user *filename, int flags, int mode)
{
    char *tmp = getname(filename);  //申请内核空间内存 tmp为首地址
    int fd = PTR_ERR(tmp);				//将首地址做个类型转换void* --> long

    if (!IS_ERR(tmp)) {					//申请是否成功,成功进入if
        fd = get_unused_fd_flags(flags);
        if (fd >= 0) {
            struct file *f = do_filp_open(dfd, tmp, flags, mode, 0);
            if (IS_ERR(f)) {
                put_unused_fd(fd);
                fd = PTR_ERR(f);
            } else {
                fsnotify_open(f->f_path.dentry);
                fd_install(fd, f);
            }
        }
        putname(tmp);
    }   
    return fd;
}

ps：
IS_ERR
内核中的函数常常返回指针，问题是如果出错，也希望能够通过返回的指针体现出来。
所幸的是，内核返回的指针一般是指向页面的边界(4K边界)，即
ptr & 0xfff == 0
这样ptr的值不可能落在（0xfffff000，0xffffffff）之间，而一般内核的出错代码也是一个小负数，在-1000到0之间，转变成unsigned long，正好在（0xfffff000，0xffffffff)之间。因此可以用
(unsigned long)ptr > (unsigned long)-1000L
也就等效于(x) >= (unsigned long)-MAX_ERRNO
其中MAX_ERRNO 为4095





SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, int, mode)
    force_o_largefile() //是不是32位？这个标志为了在32位上用64位的方法打开大文件。
    ret = do_sys_open(AT_FDCWD, filename, flags, mode);
        char *tmp = getname(filename)；分配内存,tmp是首地址，将filename用户空间的字符串放到tmp指向的内存里
        tmp= __getname(); ==> kmem_cache_alloc(names_cachep,GFP_KERNEL);//分配内存tmp是首地址
            kmem_cache_alloc_node(names_cachep,GFP_KERNEL, -1);
            slab_alloc(s, gfpflags, node, _RET_IP_);
            trace_kmem_cache_alloc_node(_RET_IP_, ret, s->objsize, s->size, gfpflags, node);
        int fd = PTR_ERR(tmp);  //将分配的内存的首地址tmp做类型转换。

			if (!IS_ERR(tmp)) {
        fd = get_unused_fd_flags(flags);
        if (fd >= 0) {
            struct file *f = do_filp_open(dfd, tmp, flags, mode, 0);
            if (IS_ERR(f)) {
                put_unused_fd(fd);
                fd = PTR_ERR(f);
            } else {
                fsnotify_open(f->f_path.dentry);
                fd_install(fd, f);
            }
        }
        putname(tmp);
    }   


           
            
	asmlinkage_protect(3, ret, filename, flags, mode);
