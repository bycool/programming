char *d_path(const struct path *path, char *buf, int buflen)
{
    char *res;
    struct path root;
    struct path tmp;
    if (path->dentry->d_op && path->dentry->d_op->d_dname)
        return path->dentry->d_op->d_dname(path->dentry, buf, buflen);
    read_lock(&current->fs->lock);
    root = current->fs->root;
    path_get(&root);
    read_unlock(&current->fs->lock);
    spin_lock(&dcache_lock);
    tmp = root;
    res = __d_path(path, &tmp, buf, buflen);
    spin_unlock(&dcache_lock);
    path_put(&root);
    return res;
}

大致流程：
d_path：
1.  参数：struct path* path; 这个参数可以使用fget()函数从文件描述符获得struct file类型的返回值里的f_path。是和目标文件相关的结构体。
	     char* buf;         缓冲区
        int buflen;        缓冲区长度
2.  如果该文件的path->dentry->dentry->d_op存在且d_op->d_dname也不为空时，直接使用d_dname(dentry, buf, buflen)直接返回


struct path {
    struct vfsmount *mnt;
    struct dentry *dentry;  目录项
};

struct dentry {
    atomic_t d_count;
    unsigned int d_flags;            /* protected by d_lock */
    spinlock_t d_lock;               /* per dentry lock */
    int d_mounted;
    struct inode *d_inode;           /* Where the name belongs to - NULL is negative */
     * The next three fields are touched by __d_lookup.  Place them here
     * so they all fit in a cache line.
    struct hlist_node d_hash;        /* lookup hash list */
    struct dentry *d_parent;         /* parent directory */
    struct qstr d_name;

    struct list_head d_lru;          /* LRU list */
     * d_child and d_rcu can share memory
    union {
        struct list_head d_child;    /* child of parent list */
        struct rcu_head d_rcu;
    } d_u;
    struct list_head d_subdirs;      /* our children */
    struct list_head d_alias;        /* inode alias list */
    unsigned long d_time;            /* used by d_revalidate */
    const struct dentry_operations *d_op;
    struct super_block *d_sb;        /* The root of the dentry tree */
    void *d_fsdata;                  /* fs-specific data */

    unsigned char d_iname[DNAME_INLINE_LEN_MIN];    /* small names */
};

